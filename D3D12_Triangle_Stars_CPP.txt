//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************

#include "stdafx.h"
#include "D3D12HelloTriangle.h"
#include <memory>

D3D12HelloTriangle::D3D12HelloTriangle(UINT width, UINT height, std::wstring name) :
	DXSample(width, height, name),
	m_frameIndex(0),
	m_viewport(),
	m_scissorRect(),
	m_rtvDescriptorSize(0)
{
	m_viewport.Width = static_cast<float>(width);
	m_viewport.Height = static_cast<float>(height);
	m_viewport.MaxDepth = 1.0f;

	m_scissorRect.right = static_cast<LONG>(width);
	m_scissorRect.bottom = static_cast<LONG>(height);
}

void D3D12HelloTriangle::OnInit()
{
	LoadPipeline();
	LoadAssets();
}

// Load the rendering pipeline dependencies.
void D3D12HelloTriangle::LoadPipeline()
{
#if defined(_DEBUG)
	// Enable the D3D12 debug layer.
{
	ComPtr<ID3D12Debug> debugController;
	if (SUCCEEDED(D3D12GetDebugInterface(IID_PPV_ARGS(&debugController))))
	{
		debugController->EnableDebugLayer();
	}
}
#endif

ComPtr<IDXGIFactory4> factory;
ThrowIfFailed(CreateDXGIFactory1(IID_PPV_ARGS(&factory)));

if (m_useWarpDevice)
{
	ComPtr<IDXGIAdapter> warpAdapter;
	ThrowIfFailed(factory->EnumWarpAdapter(IID_PPV_ARGS(&warpAdapter)));

	ThrowIfFailed(D3D12CreateDevice(
		warpAdapter.Get(),
		D3D_FEATURE_LEVEL_11_0,
		IID_PPV_ARGS(&m_device)
		));
}
else
{
	ComPtr<IDXGIAdapter1> hardwareAdapter;
	GetHardwareAdapter(factory.Get(), &hardwareAdapter);

	ThrowIfFailed(D3D12CreateDevice(
		hardwareAdapter.Get(),
		D3D_FEATURE_LEVEL_11_0,
		IID_PPV_ARGS(&m_device)
		));
}

// Describe and create the command queue.
D3D12_COMMAND_QUEUE_DESC queueDesc = {};
queueDesc.Flags = D3D12_COMMAND_QUEUE_FLAG_NONE;
queueDesc.Type = D3D12_COMMAND_LIST_TYPE_DIRECT;

ThrowIfFailed(m_device->CreateCommandQueue(&queueDesc, IID_PPV_ARGS(&m_commandQueue)));

// Describe and create the swap chain.
DXGI_SWAP_CHAIN_DESC swapChainDesc = {};
swapChainDesc.BufferCount = FrameCount;
swapChainDesc.BufferDesc.Width = m_width;
swapChainDesc.BufferDesc.Height = m_height;
swapChainDesc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
swapChainDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD;
swapChainDesc.OutputWindow = Win32Application::GetHwnd();
swapChainDesc.SampleDesc.Count = 1;
swapChainDesc.Windowed = TRUE;

ComPtr<IDXGISwapChain> swapChain;
ThrowIfFailed(factory->CreateSwapChain(
	m_commandQueue.Get(),		// Swap chain needs the queue so that it can force a flush on it.
	&swapChainDesc,
	&swapChain
	));

ThrowIfFailed(swapChain.As(&m_swapChain));

// This sample does not support fullscreen transitions.
ThrowIfFailed(factory->MakeWindowAssociation(Win32Application::GetHwnd(), DXGI_MWA_NO_ALT_ENTER));

m_frameIndex = m_swapChain->GetCurrentBackBufferIndex();

// Create descriptor heaps.
{
	// Describe and create a render target view (RTV) descriptor heap.
	D3D12_DESCRIPTOR_HEAP_DESC rtvHeapDesc = {};
	rtvHeapDesc.NumDescriptors = FrameCount;
	rtvHeapDesc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV;
	rtvHeapDesc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE;
	ThrowIfFailed(m_device->CreateDescriptorHeap(&rtvHeapDesc, IID_PPV_ARGS(&m_rtvHeap)));

	m_rtvDescriptorSize = m_device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_RTV);
}

// Create frame resources.
{
	CD3DX12_CPU_DESCRIPTOR_HANDLE rtvHandle(m_rtvHeap->GetCPUDescriptorHandleForHeapStart());

	// Create a RTV for each frame.
	for (UINT n = 0; n < FrameCount; n++)
	{
		ThrowIfFailed(m_swapChain->GetBuffer(n, IID_PPV_ARGS(&m_renderTargets[n])));
		m_device->CreateRenderTargetView(m_renderTargets[n].Get(), nullptr, rtvHandle);
		rtvHandle.Offset(1, m_rtvDescriptorSize);
	}
}

ThrowIfFailed(m_device->CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE_DIRECT, IID_PPV_ARGS(&m_commandAllocator)));
}

// Load the sample assets.
void D3D12HelloTriangle::LoadAssets()
{
	// Create an empty root signature.
	{
		CD3DX12_ROOT_SIGNATURE_DESC rootSignatureDesc;
		rootSignatureDesc.Init(0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT);

		ComPtr<ID3DBlob> signature;
		ComPtr<ID3DBlob> error;
		ThrowIfFailed(D3D12SerializeRootSignature(&rootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION_1, &signature, &error));
		ThrowIfFailed(m_device->CreateRootSignature(0, signature->GetBufferPointer(), signature->GetBufferSize(), IID_PPV_ARGS(&m_rootSignature)));
	}

	// Create the pipeline state, which includes compiling and loading shaders.
	{
		ComPtr<ID3DBlob> vertexShader;
		ComPtr<ID3DBlob> pixelShader;

#if defined(_DEBUG)
		// Enable better shader debugging with the graphics debugging tools.
		UINT compileFlags = D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION;
#else
		UINT compileFlags = 0;
#endif

		ThrowIfFailed(D3DCompileFromFile(GetAssetFullPath(L"shaders.hlsl").c_str(), nullptr, nullptr, "VSMain", "vs_5_0", compileFlags, 0, &vertexShader, nullptr));
		ThrowIfFailed(D3DCompileFromFile(GetAssetFullPath(L"shaders.hlsl").c_str(), nullptr, nullptr, "PSMain", "ps_5_0", compileFlags, 0, &pixelShader, nullptr));

		// Define the vertex input layout.
		D3D12_INPUT_ELEMENT_DESC inputElementDescs[] =
		{
			{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },
			{ "COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 12, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 }
		};

		// Describe and create the graphics pipeline state object (PSO).
		D3D12_GRAPHICS_PIPELINE_STATE_DESC psoDesc = {};
		psoDesc.InputLayout = { inputElementDescs, _countof(inputElementDescs) };
		psoDesc.pRootSignature = m_rootSignature.Get();
		psoDesc.VS = { reinterpret_cast<UINT8*>(vertexShader->GetBufferPointer()), vertexShader->GetBufferSize() };
		psoDesc.PS = { reinterpret_cast<UINT8*>(pixelShader->GetBufferPointer()), pixelShader->GetBufferSize() };
		psoDesc.RasterizerState = CD3DX12_RASTERIZER_DESC(D3D12_DEFAULT);
		psoDesc.BlendState = CD3DX12_BLEND_DESC(D3D12_DEFAULT);
		psoDesc.DepthStencilState.DepthEnable = FALSE;
		psoDesc.DepthStencilState.StencilEnable = FALSE;
		psoDesc.SampleMask = UINT_MAX;
		psoDesc.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
		psoDesc.NumRenderTargets = 1;
		psoDesc.RTVFormats[0] = DXGI_FORMAT_R8G8B8A8_UNORM;
		psoDesc.SampleDesc.Count = 1;
		ThrowIfFailed(m_device->CreateGraphicsPipelineState(&psoDesc, IID_PPV_ARGS(&m_pipelineState)));
	}

	// Create the command list.
	ThrowIfFailed(m_device->CreateCommandList(0, D3D12_COMMAND_LIST_TYPE_DIRECT, m_commandAllocator.Get(), m_pipelineState.Get(), IID_PPV_ARGS(&m_commandList)));

	// Command lists are created in the recording state, but there is nothing
	// to record yet. The main loop expects it to be closed, so close it now.
	ThrowIfFailed(m_commandList->Close());

	// Create the vertex buffer.
	{
		// randomize, the randomizer
		srand(time(NULL));
		
		// Initialize our Triangle List (fill triangleVertices and triDirection)

		for (int i = 0; i < 1000; i++)
		{
			// random position on screen
			float vx1 = ((float)(rand() % 1920) / 960.0f) - 1.0f;	// theoreticaly approx. -1.0f to 1.0f
			float vy1 = ((float)(rand() % 1080) / 450.0f) - 1.2f;	// theoretically approx. -1.2f to 1.2f
			float size1 = (float)(rand() % 2) + 1.0f;
			float vsizex1 = size1 * 0.00104f;
			float vsizey1 = size1 * 0.00111f;

			// random colors...!
			float pR = (float)(rand() % 256) / 256.0f;
			float pG = (float)(rand() % 256) / 256.0f;
			float pB = (float)(rand() % 256) / 256.0f;

			// position
			triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ pR, pG, pB, 1.0f } };
			triangleVertices[(i * 3) + 1] = { { vx1 + vsizex1, (vy1 - vsizey1) * m_aspectRatio, 0.0f },{ pR, pG, pB, 1.0f } };
			triangleVertices[(i * 3) + 2] = { { vx1 - vsizex1, (vy1 - vsizey1) * m_aspectRatio, 0.0f },{ pR, pG, pB, 1.0f } };

			// speed, reusing variables
			size1 = (float)(rand() % 20 + 1) / 4.0f;
			triDirection[i].x = size1 * -0.00104f;
			triDirection[i].y = size1 * -0.00111f;
		}

		/*
		// Create our Triangle List...
		for (int i = 0; i < 400; i++)
		{
			if (i < 100)
			{
				// init particle group - starship travelling through stars....
				float vx1 = -0.5f, vy1 = -0.3f;

				triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
				triangleVertices[(i * 3) + 1] = { { vx1 + 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
				triangleVertices[(i * 3) + 2] = { { vx1 - 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
				float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
				triDirection[i].x = (float)(rand() % 5 + 1) * sin(rndAngleRadian) * 0.00104f;
				triDirection[i].y = (float)(rand() % 5 + 1) * cos(rndAngleRadian) * 0.00111f;
			}
			if ( i >= 100 && i < 200 )
			{
			 	// circular revolution.... x=-1 to 0   y=0 to 0.6
			 	float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
			 	triDirection[i].x = rndAngleRadian;
				triDirection[i].y = (float)(rand() % 25 + 3) / 100.0f; // radius of each particle from center
				orbitSpeed[i - 100].x = ((float)(rand() % 350) - 175) / 32000.0f;
				
			 	// initial position 'in orbit'
			 	float vx1 = -0.5f + cos(triDirection[i].x) * triDirection[i].y;
			 	float vy1 = 0.3f + sin(triDirection[i].x) * triDirection[i].y;
				// float vx1 = -0.5f, vy1 = 0.3f;
			 	triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{0.0f, 1.0f, 0.0f, 1.0f} };
			 	triangleVertices[(i * 3) + 1] = { { vx1 + 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
			 	triangleVertices[(i * 3) + 2] = { { vx1 - 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
			}
			if (i >= 200 && i < 300)
			{
				// init flies...yes, flies.... :)
				float vx1 = ((float)(rand() % 960) / 960.0f);
				float vy1 = ((float)(rand() % 540) / 900.0f) - 0.6f;

				triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
				triangleVertices[(i * 3) + 1] = { { vx1 + 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
				triangleVertices[(i * 3) + 2] = { { vx1 - 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };

				float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
				triDirection[i].x = (float)(rand() % 5 + 1) * sin(rndAngleRadian) * 0.00104f;
				triDirection[i].y = (float)(rand() % 5 + 1) * cos(rndAngleRadian) * 0.00111f * m_aspectRatio;

				// init flies speed...
				fliesSpeed[i-200].x = 0.00104f * (float)(rand() % 4) - 0.00208f;
				fliesSpeed[i-200].y = 0.00111f * (float)(rand() % 3) - 0.001665f * m_aspectRatio;

			}
			if (i >= 300 && i < 400)
			{	
				// fountain
				float vx1 = 0.5f, vy1 = 0.0f; 

				triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
				triangleVertices[(i * 3) + 1] = { { vx1 + 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
				triangleVertices[(i * 3) + 2] = { { vx1 - 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
				float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
				triDirection[i].x = (float)(rand() % 5 + 1) * sin(rndAngleRadian) * 0.00104f;
				triDirection[i].y = (float)(rand() % 8 + 1) * cos(rndAngleRadian) * 0.00111f * m_aspectRatio;
			}
		}
		*/

		const UINT vertexBufferSize = sizeof(triangleVertices);

		// Note: using upload heaps to transfer static data like vert buffers is not 
		// recommended. Every time the GPU needs it, the upload heap will be marshalled 
		// over. Please read up on Default Heap usage. An upload heap is used here for 
		// code simplicity and because there are very few verts to actually transfer.
		ThrowIfFailed(m_device->CreateCommittedResource(
			&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),
			D3D12_HEAP_FLAG_NONE,
			&CD3DX12_RESOURCE_DESC::Buffer(vertexBufferSize),
			D3D12_RESOURCE_STATE_GENERIC_READ,
			nullptr,
			IID_PPV_ARGS(&m_vertexBuffer)));

		// Copy the triangle data to the vertex buffer.
		UINT8* pVertexDataBegin;
		CD3DX12_RANGE readRange(0, 0);		// We do not intend to read from this resource on the CPU.
		ThrowIfFailed(m_vertexBuffer->Map(0, &readRange, reinterpret_cast<void**>(&pVertexDataBegin)));
		memcpy(pVertexDataBegin, triangleVertices, sizeof(triangleVertices));
		m_vertexBuffer->Unmap(0, nullptr);

		// Initialize the vertex buffer view.
		m_vertexBufferView.BufferLocation = m_vertexBuffer->GetGPUVirtualAddress();
		m_vertexBufferView.StrideInBytes = sizeof(Vertex);
		m_vertexBufferView.SizeInBytes = vertexBufferSize;
	}

	// Create synchronization objects and wait until assets have been uploaded to the GPU.
	{
		ThrowIfFailed(m_device->CreateFence(0, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&m_fence)));
		m_fenceValue = 1;

		// Create an event handle to use for frame synchronization.
		m_fenceEvent = CreateEvent(nullptr, FALSE, FALSE, nullptr);
		if (m_fenceEvent == nullptr)
		{
			ThrowIfFailed(HRESULT_FROM_WIN32(GetLastError()));
		}

		// Wait for the command list to execute; we are reusing the same command 
		// list in our main loop but for now, we just want to wait for setup to 
		// complete before continuing.
		WaitForPreviousFrame();
	}
}

// Update frame-based values.
void D3D12HelloTriangle::OnUpdate()
{
	// add velocity to position, then check for off the screen, if so, re-spawn along top edge or right edge.
	for (int i = 0; i < 1000; i++)
	{
		triangleVertices[i * 3].position.x += triDirection[i].x;
		triangleVertices[(i * 3)+1].position.x += triDirection[i].x;
		triangleVertices[(i * 3)+2].position.x += triDirection[i].x;
		triangleVertices[i * 3].position.y += triDirection[i].y;
		triangleVertices[(i * 3)+1].position.y += triDirection[i].y;
		triangleVertices[(i * 3)+2].position.y += triDirection[i].y;

		// re-spawn code
		if ( triangleVertices[i*3].position.x < -1.0f || triangleVertices[i*3].position.y < -1.2f)
		{
			// random position on screen, (along top or right edge)
			float vx1 = 1.0f;
			float vy1 = 1.2f;
			if (rand() % 2 == 1)
			{
				vx1 = ((float)(rand() % 1920) / 960.0f) - 1.0f;	// theoreticaly approx. -1.0f to 1.0f
			}
			else {
				vy1 = ((float)(rand() % 1080) / 450.0f) - 1.2f;	// theoretically approx. -1.2f to 1.2f
			}
			float size1 = (float)(rand() % 2) + 1.0f;
			float vsizex1 = size1 * 0.00104f;
			float vsizey1 = size1 * 0.00111f;

			// random colors...!
			float pR = (float)(rand() % 256) / 256.0f;
			float pG = (float)(rand() % 256) / 256.0f;
			float pB = (float)(rand() % 256) / 256.0f;

			// position
			triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ pR, pG, pB, 1.0f } };
			triangleVertices[(i * 3) + 1] = { { vx1 + vsizex1, (vy1 - vsizey1) * m_aspectRatio, 0.0f },{ pR, pG, pB, 1.0f } };
			triangleVertices[(i * 3) + 2] = { { vx1 - vsizex1, (vy1 - vsizey1) * m_aspectRatio, 0.0f },{ pR, pG, pB, 1.0f } };

			// speed, reusing variables
			size1 = (float)(rand() % 20 + 1) / 4.0f;
			triDirection[i].x = size1 * -0.00104f;
			triDirection[i].y = size1 * -0.00111f;
		}
	}

	/*
	// Cycle through particle system and update based on quadrant.
	// Quadrant 1 = Blue Particles movement
	for (int i = 0; i < 100; i++)
	{
		triangleVertices[i * 3].position.x += triDirection[i].x;
		triangleVertices[i * 3].position.y += triDirection[i].y;
		triangleVertices[(i * 3)+1].position.x += triDirection[i].x;
		triangleVertices[(i * 3)+1].position.y += triDirection[i].y;
		triangleVertices[(i * 3)+2].position.x += triDirection[i].x;
		triangleVertices[(i * 3)+2].position.y += triDirection[i].y;

		if (triangleVertices[i * 3].position.x > 0 || triangleVertices[i*3].position.x < -1 || triangleVertices[i * 3].position.y > 0 || triangleVertices[i*3].position.y < -1.2 )
		{
			// reset particles
			float vx1 = -0.5f, vy1 = -0.3f;

			triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
			triangleVertices[(i * 3) + 1] = { { vx1 + 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
			triangleVertices[(i * 3) + 2] = { { vx1 - 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
			float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
			triDirection[i].x = (float)(rand() % 5 + 1) * sin(rndAngleRadian) * 0.00104f;
			triDirection[i].y = (float)(rand() % 5 + 1) * cos(rndAngleRadian) * 0.00111f;

		}
	}
	// Quadrant 2 = Green Particles movement
	for (int i = 100; i < 200; i++)
	{
	 	// increment angle, and reset at 360 (6.28 in radians)
	 	triDirection[i].x += orbitSpeed[i-100].x;
	 	if (triDirection[i].x > 6.28f)
	 	{
	 		triDirection[i].x = 0.0f;
	 	}
	 	if (triDirection[i].x < 0)
	 	{
	 		triDirection[i].x = 6.28f;
	 	}
	 	 
	 	// recompute position 'in orbit' (every frame)
		float vx1 = -0.5f + cos(triDirection[i].x) * triDirection[i].y;
		float vy1 = 0.3f + sin(triDirection[i].x) * triDirection[i].y;

	 	triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
	 	triangleVertices[(i * 3) + 1] = { { vx1 + 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
	 	triangleVertices[(i * 3) + 2] = { { vx1 - 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
	}
	for (int i = 200; i < 300; i++)
	{
		triangleVertices[i * 3].position.x += fliesSpeed[i-200].x;
		triangleVertices[(i * 3) + 1].position.x += fliesSpeed[i-200].x;
		triangleVertices[(i * 3) + 2].position.x += fliesSpeed[i-200].x;
		triangleVertices[i * 3].position.y += fliesSpeed[i-200].y;
		triangleVertices[(i * 3) + 1].position.y += fliesSpeed[i-200].y;
		triangleVertices[(i * 3) + 2].position.y += fliesSpeed[i-200].y;
		if	(triangleVertices[i * 3].position.x > 1 || triangleVertices[i * 3].position.x < 0 || triangleVertices[i * 3].position.y > 0 || triangleVertices[i * 3].position.y < -1.2)
		{
			// reset particles (position only)
			float vx1 = ((float)(rand() % 960) / 960.0f);
			float vy1 = ((float)(rand() % 540) / 900.0f) - 0.6f;

			triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
			triangleVertices[(i * 3) + 1] = { { vx1 + 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
			triangleVertices[(i * 3) + 2] = { { vx1 - 0.00624f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
		}
		if (rand() % 12 == 5)
		{
			// change direction and speed...
			float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
			triDirection[i].x = (float)(rand() % 5 + 1) * sin(rndAngleRadian) * 0.00104f;
			triDirection[i].y = (float)(rand() % 5 + 1) * cos(rndAngleRadian) * 0.00111f * m_aspectRatio;

			// reset flies speed...
			fliesSpeed[i-200].x = 0.00104f * (float)(rand() % 4) - 0.00208f;
			fliesSpeed[i-200].y = 0.00111f * (float)(rand() % 3) - 0.001665f;
		}

	}
	for (int i = 300; i < 400; i++)
	{
		triangleVertices[i * 3].position.x += triDirection[i].x;
		triangleVertices[(i * 3) + 1].position.x += triDirection[i].x;
		triangleVertices[(i * 3) + 2].position.x += triDirection[i].x;
		triangleVertices[i * 3].position.y += triDirection[i].y;
		triangleVertices[(i * 3) + 1].position.y += triDirection[i].y;
		triangleVertices[(i * 3) + 2].position.y += triDirection[i].y;
		
		// gravity
		triDirection[i].y -= 0.0000666f;
		if (triangleVertices[i * 3].position.x > 1 || triangleVertices[i * 3].position.x < 0 || triangleVertices[i * 3].position.y < 0)
		{
			// reset fountain particles
			float vx1 = 0.5f, vy1 = 0.0f;

			triangleVertices[i * 3] = { { vx1, vy1 * m_aspectRatio, 0.0f },{ 1.0f, 0.0f, 0.0f, 1.0f } };
			triangleVertices[(i * 3) + 1] = { { vx1 + 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 1.0f, 0.0f, 1.0f } };
			triangleVertices[(i * 3) + 2] = { { vx1 - 0.0104f, (vy1 - 0.0111f) * m_aspectRatio, 0.0f },{ 0.0f, 0.0f, 1.0f, 1.0f } };
			float rndAngleRadian = (float)(rand() % 360)*3.14159f / 180.0f;
			triDirection[i].x = (float)(rand() % 5 + 1) * sin(rndAngleRadian) * 0.00104f;
			triDirection[i].y = (float)(rand() % 8 + 1) * cos(rndAngleRadian) * 0.00111f * m_aspectRatio;

		}

	}
	*/

	const UINT vertexBufferSize = sizeof(triangleVertices);
	
	// Copy the triangle data to the vertex buffer.
	UINT8* pVertexDataBegin;
	CD3DX12_RANGE readRange(0, 0);		// We do not intend to read from this resource on the CPU.
	ThrowIfFailed(m_vertexBuffer->Map(0, &readRange, reinterpret_cast<void**>(&pVertexDataBegin)));
	memcpy(pVertexDataBegin, triangleVertices, sizeof(triangleVertices));
	m_vertexBuffer->Unmap(0, nullptr);
	
	// Initialize the vertex buffer view.
	m_vertexBufferView.BufferLocation = m_vertexBuffer->GetGPUVirtualAddress();
	m_vertexBufferView.StrideInBytes = sizeof(Vertex);
	m_vertexBufferView.SizeInBytes = vertexBufferSize;
}

// Render the scene.
void D3D12HelloTriangle::OnRender()
{
	// Record all the commands we need to render the scene into the command list.
	PopulateCommandList();

	// Execute the command list.
	ID3D12CommandList* ppCommandLists[] = { m_commandList.Get() };
	m_commandQueue->ExecuteCommandLists(_countof(ppCommandLists), ppCommandLists);

	// Present the frame.
	ThrowIfFailed(m_swapChain->Present(1, 0));

	WaitForPreviousFrame();
}

void D3D12HelloTriangle::OnDestroy()
{
	// Ensure that the GPU is no longer referencing resources that are about to be
	// cleaned up by the destructor.
	WaitForPreviousFrame();

	CloseHandle(m_fenceEvent);
}

void D3D12HelloTriangle::PopulateCommandList()
{
	// Command list allocators can only be reset when the associated 
	// command lists have finished execution on the GPU; apps should use 
	// fences to determine GPU execution progress.
	ThrowIfFailed(m_commandAllocator->Reset());

	// However, when ExecuteCommandList() is called on a particular command 
	// list, that command list can then be reset at any time and must be before 
	// re-recording.
	ThrowIfFailed(m_commandList->Reset(m_commandAllocator.Get(), m_pipelineState.Get()));

	// Set necessary state.
	m_commandList->SetGraphicsRootSignature(m_rootSignature.Get());
	m_commandList->RSSetViewports(1, &m_viewport);
	m_commandList->RSSetScissorRects(1, &m_scissorRect);

	// Indicate that the back buffer will be used as a render target.
	m_commandList->ResourceBarrier(1, &CD3DX12_RESOURCE_BARRIER::Transition(m_renderTargets[m_frameIndex].Get(), D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET));

	CD3DX12_CPU_DESCRIPTOR_HANDLE rtvHandle(m_rtvHeap->GetCPUDescriptorHandleForHeapStart(), m_frameIndex, m_rtvDescriptorSize);
	m_commandList->OMSetRenderTargets(1, &rtvHandle, FALSE, nullptr);

	// Record commands.
	const float clearColor[] = { 0.0f, 0.0f, 0.0f, 1.0f };
	m_commandList->ClearRenderTargetView(rtvHandle, clearColor, 0, nullptr);
	m_commandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
	m_commandList->IASetVertexBuffers(0, 1, &m_vertexBufferView);
	m_commandList->DrawInstanced(3000, 1, 0, 0);	// number of vertices to draw

												// Indicate that the back buffer will now be used to present.
	m_commandList->ResourceBarrier(1, &CD3DX12_RESOURCE_BARRIER::Transition(m_renderTargets[m_frameIndex].Get(), D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT));

	ThrowIfFailed(m_commandList->Close());
}

void D3D12HelloTriangle::WaitForPreviousFrame()
{
	// WAITING FOR THE FRAME TO COMPLETE BEFORE CONTINUING IS NOT BEST PRACTICE.
	// This is code implemented as such for simplicity. More advanced samples 
	// illustrate how to use fences for efficient resource usage.

	// Signal and increment the fence value.
	const UINT64 fence = m_fenceValue;
	ThrowIfFailed(m_commandQueue->Signal(m_fence.Get(), fence));
	m_fenceValue++;

	// Wait until the previous frame is finished.
	if (m_fence->GetCompletedValue() < fence)
	{
		ThrowIfFailed(m_fence->SetEventOnCompletion(fence, m_fenceEvent));
		WaitForSingleObject(m_fenceEvent, INFINITE);
	}

	m_frameIndex = m_swapChain->GetCurrentBackBufferIndex();
}
